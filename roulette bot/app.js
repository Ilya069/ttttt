const mongo = require("mongoose");
mongo.connect("mlab.com - —Å–æ–∑–¥–∞–π—Ç–µ –ë–î —Ç—É—Ç");

const User = mongo.model("User", {
	id: Number,
	partner: Number
});

const Telegram = require("node-telegram-bot-api");
const bot = new Telegram("1311565912:AAH_sF3wudNfrGJ4I6XLrNu5e_On3lWE7zk", { polling: true });

const keyboards = {
	main: [
		["üîé –ü–æ–∏—Å–∫"],
		["üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "üìÉ –ü—Ä–∞–≤–∏–ª–∞"]
	],
	main_search: [
		["üö´ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–∏—Å–∫"],
		["üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "üìÉ –ü—Ä–∞–≤–∏–ª–∞"]
	],
	main_in_dialog: [
		["üö´ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∏–∞–ª–æ–≥"],
		["üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "üìÉ –ü—Ä–∞–≤–∏–ª–∞"]
	]
}

let queue = [];

bot.on("message", async (message) => {
	message.send = (text, params) => bot.sendMessage(message.chat.id, text, params);

	let $user = await User.findOne({ id: message.from.id });
	if( !$user ) {
		let user = new User({
			id: message.from.id,
			partner: 0
		});

		await user.save();
		return message.send(`–ú–µ–Ω—é.`, {
			reply_markup: {
				keyboard: keyboards.main,
				resize_keyboard: true
			}
		});
	}

	message.user = await User.findOne({ id: message.from.id });
	if(message.text.startsWith("/start")) {
		return message.send(`–ú–µ–Ω—é.`, {
			reply_markup: {
				keyboard: message.user.partner ? keyboards.main_in_dialog : queue.indexOf(message.from.id) === -1 ? keyboards.main : keyboards.main_search,
				resize_keyboard: true
			}
		});
	}

	if(message.text === "üîé –ü–æ–∏—Å–∫") {
		if(message.user.partner) return message.send(`–í—ã —É–∂–µ –≤ –¥–∏–∞–ª–æ–≥–µ!`, {
			reply_markup: {
				keyboard: keyboards.main_in_dialog,
				resize_keyboard: true
			}
		});

		if(queue.indexOf(message.from.id) !== -1) return message.send(`–í—ã —É–∂–µ –≤ –ø–æ–∏—Å–∫–µ.`, {
			reply_markup: {
				keyboard: keyboards.main_search,
				resize_keyboard: true
			}
		});

		if(queue[0]) {
			queue.push(message.from.id);
			let partner = await User.findOne({ id: queue[0] });

			await partner.set("partner", queue[1]);
			await message.user.set("partner", queue[0]);

			bot.sendMessage(queue[0], "–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω, –æ–±—â–∞–π—Ç–µ—Å—å!", {
				reply_markup: {
					keyboard: keyboards.main_in_dialog,
					resize_keyboard: true
				}
			});

			message.send("–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω, –æ–±—â–∞–π—Ç–µ—Å—å!", {
				reply_markup: {
					keyboard: keyboards.main_in_dialog,
					resize_keyboard: true
				}
			});

			queue = [];
		} else {
			queue.push(message.from.id);
			return message.send(`–í—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –æ—á–µ—Ä–µ–¥—å –ø–æ–∏—Å–∫–∞, –æ–∂–∏–¥–∞–π—Ç–µ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞.`, {
				reply_markup: {
					keyboard: keyboards.main_search,
					resize_keyboard: true
				}
			});
		}
	}

	if(message.text === "üö´ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–∏—Å–∫") {
		if(queue.indexOf(message.from.id) === -1) return message.send(`–í—ã –Ω–µ –≤ –æ—á–µ—Ä–µ–¥–∏!`, {
			reply_markup: {
				keyboard: message.user.partner ? keyboards.main_in_dialog : keyboards.main,
				resize_keyboard: true
			}
		});

		queue = [];
		return message.send(`–í—ã –≤—ã—à–ª–∏ –∏–∑ –æ—á–µ—Ä–µ–¥–∏.`, {
			reply_markup: {
				keyboard: keyboards.main,
				resize_keyboard: true
			}
		});
	}

	if(message.text === "üö´ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∏–∞–ª–æ–≥") {
		if(!message.user.partner) return message.send(`–í—ã –Ω–µ –≤ –¥–∏–∞–ª–æ–≥–µ!`, {
			reply_markup: {
				keyboard: queue.indexOf(message.from.id) !== -1 ? keyboards.main_search : keyboards.main,
				resize_keyboard: true
			}
		});

		let partner = await User.findOne({ partner: message.from.id });
		
		await partner.set("partner", 0);
		await message.user.set("partner", 0);

		bot.sendMessage(partner.id, "–í–∞—à —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –æ—Ç–∫–ª—é—á–∏–ª—Å—è.", {
			reply_markup: {
				keyboard: keyboards.main,
				resize_keyboard: true
			}
		});

		message.send(`–í—ã –æ—Ç–∫–ª—é—á–∏–ª–∏—Å—å.`, {
			reply_markup: {
				keyboard: keyboards.main,
				resize_keyboard: true
			}
		});
	}

	if(message.text === "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞") {
		return message.send(
			`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:`
			+ `\n`
			+ `\n`
			+ `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–æ—Ç–µ: ${ await User.countDocuments() }`
		);
	}

	if(message.text === "üìÉ –ü—Ä–∞–≤–∏–ª–∞") {
		return message.send(`–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –ë–æ—Ç–∞ ¬´Chat Roulette Bot¬ª –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–æ–±—â–∞—Ç—å—Å—è —Å–æ —Å–ª—É—á–∞–π–Ω—ã–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–º.

–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ –Ω–µ—Å–µ—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –∑–∞ –∫–æ–Ω—Ç–µ–Ω—Ç —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è–µ–º—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏. –ü—Ä–∏ –≤—ã—è–≤–ª–µ–Ω–∏–∏ –Ω–∞—Ä—É—à–µ–Ω–∏–π –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –∏–º–µ–µ—Ç –ø—Ä–∞–≤–æ –∑–∞–±–∞–Ω–∏—Ç—å –Ω–∞ –±–µ—Å—Å—Ä–æ—á–Ω—ã–π —Å—Ä–æ–∫ –ª—é–±–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω–∞—Ä—É—à–∞—é—â–µ–≥–æ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ –º–æ–∂–µ—Ç –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å, —á—Ç–æ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –±—É–¥–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö.

–ó–∞–ø—Ä–µ—â–µ–Ω–æ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è—Ç—å:
‚Äî –ü–æ—Ä–Ω–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç.
‚Äî –û—Ä—É–∂–∏–µ, –Ω–∞—Ä–∫–æ—Ç–∏–∫–∏, –ø—Å–∏—Ö–æ—Ç—Ä–æ–ø–Ω—ã–µ –≤–µ—â–µ—Å—Ç–≤–∞.
‚Äî –°–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏–∑—ã–≤–∞—é—â–∏–µ –∫ —Å—É–∏—Ü–∏–¥—É.
‚Äî –°–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏–∑—ã–≤–∞—é—â–∏–µ –∫ –º–∞—Å—Å–æ–≤—ã–º –±–µ—Å–ø–æ—Ä—è–¥–∫–∞–º.
‚Äî –û—Å–∫–æ—Ä–±–∏—Ç–µ–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.
‚Äî –≠–∫—Å—Ç—Ä–µ–º–∏—Å—Ç—Å–∫–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç.
‚Äî –õ—é–±—ã–µ –∏–Ω—ã–µ –≤–µ—â–∏, –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—É—é –∫ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏—é –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ–º.
‚Äî –ù–∞—à telegram –∫–∞–Ω–∞–ª - @slivmenss`);
	}

	if(message.user.partner) {
		if(message.photo) {
			bot.sendPhoto(message.user.partner, message.photo[message.photo.length - 1].file_id, {
				caption: message.caption ? message.caption : ""
			})
		}

		if(message.audio) {
			bot.sendAudio(message.user.partner, message.audio.file_id, {
				caption: message.caption ? message.caption : ""
			});
		}

		if(message.video) {
			bot.sendVideo(message.user.partner, message.video.file_id, {
				caption: message.caption ? message.caption : ""
			});
		}

		if(message.voice) {
			bot.sendVoice(message.user.partner, message.voice.file_id, {
				caption: message.caption ? message.caption : ""
			});
		}

		if(message.video_note) {
			bot.sendVideoNote(message.user.partner, message.video_note.file_id, {
				caption: message.caption ? message.caption : ""
			});
		}

		if(message.sticker) {
			bot.sendSticker(message.user.partner, message.sticker.file_id, {
				caption: message.caption ? message.caption : ""
			});
		}

		if(message.document) {
			return message.send(`–û—à–∏–±–∫–∞! –ó–∞–ø—Ä–µ—â–µ–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã.`);
		}

		if(message.text) {
			bot.sendMessage(message.user.partner, message.text);
		}
	}
});

User.prototype.inc = function(field, value = 1) {
	this[field] += value;
	return this.save();
}

User.prototype.dec = function(field, value = 1) {
	this[field] -= value;
	return this.save();
}

User.prototype.set = function(field, value) {
	this[field] = value;
	return this.save();
}